# config for Django + Postgres -> Travis -> Heroku

language: python
python:
    - 3.6
services:
#    - docker
    - postgresql
install:
    - pip install -r requirements.txt
before_script:
    - python manage.py collectstatic
#    - psql -c 'create database testdb;' -U postgres
#    - psql -c 'create database travisci;' -U postgres
#    - psql -c "CREATE DATABASE testdb;" -U postgres

script:
#    - docker-compose build
#    - docker ps
#    - docker-compose run web python manage.py test
#    - docker-compose run web python manage.py makemigrations
#    - docker-compose run web python manage.py migrate
    # travis without dockerization
#    - python manage.py makemigrations
#    - python manage.py migrate
    - python manage.py test

# undockerize, travis CI straight to heroku deployment CD
deploy:
    provider: heroku
    api_key: $HEROKU_API_KEY
    app: mywebapp0
    run: python manage.py migrate
    on: master

#after_success:
#    - docker ps
#    - sudo docker login --username $HEROKU_DOCKER_USERNAME --password $HEROKU_AUTH_TOKEN registry.heroku.com
#    - sudo docker tag myangularapp:latest registry.heroku.com/adam-myangularapp/web
#    - if [ $TRAVIS_BRANCH == "master" ] && [ $TRAVIS_PULL_REQUEST = "false" ]; then sudo docker push registry.heroku.com/adam-myangularapp/web; fi
#    - sudo docker login --username $HEROKU_DOCKER_USERNAME --password $HEROKU_AUTH_TOKEN registry.heroku.com
#    - sudo docker tag mywebapp0:latest registry.heroku.com/mywebapp0/web
#    - if [ $TRAVIS_BRANCH == "master" ] && [ $TRAVIS_PULL_REQUEST == "false" ]; then sudo docker push registry.heroku.com/mywebapp0/web; fi

#    - heroku addons:create heroku-postgresql:hobby-dev -a mywebapp0
#    - heroku run python manage.py makemigrations -a mywebapp0
#    - heroku run python manage.py migrate -a mywebapp0
